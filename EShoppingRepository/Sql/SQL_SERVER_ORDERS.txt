=====CREATE ORDERS TABLE=====
create table orders (
	id int primary key identity(1,1),
	order_id varchar(255),
	order_placed_date datetime2(7),
	total_price int,
	customer int,
	user_id int
)

=====STORE PROCEDURE TO PLACE ORDER=====
create procedure spPlaceOrder
(
	@order_id nvarchar(50),
	@user_id int
)
as
declare @total_price int
declare @cart_id int
begin
	set @total_price = 0
	set @cart_id = (select cart_id from cart where user_id = @user_id)
	begin try
		if NOT EXISTS (select * from cart_items where cart_id = @cart_id)
			print 'CART ID NOT FOUND'
		else
			begin
				set @total_price = (select dbo.fnCalculateTotalPrice(@cart_id));			
				insert into orders(order_id,order_placed_date,total_price,customer_id,user_id)
					values (@order_id,SYSDATETIME(),@total_price,(select customer_id from customer where user_id = @user_id),@user_id);
				
				exec spUpdateCart @order_id,@cart_id;
			end
	end try
	begin catch
		select ERROR_MESSAGE() as ErrorMessage
	end catch
end

=====STORE PROCEDURE FOR GET PLACED ORDERS=====
create procedure spFetchOrders 
(
	@user_id int
)
as
begin
	begin try
		if NOT EXISTS (select * from cart_items where cart_id in (select cart_id from cart where user_id = @user_id))
			print 'Cart Not Found'
		else
			begin
				select orders.id,orders.order_id,orders.order_placed_date,orders.total_price,orders.customer_id,orders.user_id,
					   order_products.book_id,order_products.quantity,book.id,book.auther_name,book.book_detail,book.book_image_src,
					   book.book_name,book.book_price,book.isbn_number,book.publishing_year
				from orders join order_products on orders.order_id = order_products.order_id  join book on order_products.book_id = book.id
				where orders.user_id = @user_id
			end
	end try
	begin catch
		select ERROR_MESSAGE() as ErrorMessage
	end catch
end
